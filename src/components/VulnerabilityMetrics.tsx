
import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { AlertTriangle, Shield, TrendingUp, Server, CheckCircle, XCircle, Activity, Zap } from "lucide-react";
import { dashboardService, DashboardMetrics } from "@/services/dashboardService";

export const VulnerabilityMetrics = () => {
  const [metrics, setMetrics] = useState<DashboardMetrics>({
    totalVulnerabilities: 0,
    criticalVulnerabilities: 0,
    highVulnerabilities: 0,
    mediumVulnerabilities: 0,
    lowVulnerabilities: 0,
    totalAssets: 0
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchMetrics = async () => {
      try {
        const data = await dashboardService.getDashboardMetrics();
        setMetrics(data);
      } catch (error) {
        console.error('Error loading metrics:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchMetrics();
  }, []);

  const remediationRate = metrics.totalVulnerabilities > 0 
    ? Math.round(((metrics.totalVulnerabilities - metrics.criticalVulnerabilities - metrics.highVulnerabilities) / metrics.totalVulnerabilities) * 100)
    : 0;

  const metricsData = [
    {
      title: "Total Vulnerabilities",
      value: metrics.totalVulnerabilities,
      icon: AlertTriangle,
      gradient: "from-orange-500 to-red-500",
      description: `Across ${metrics.totalAssets} assets`,
      trend: "+12% from last month"
    },
    {
      title: "Critical Issues",
      value: metrics.criticalVulnerabilities,
      icon: XCircle,
      gradient: "from-red-500 to-pink-500",
      description: "Requires immediate attention",
      trend: "-8% from last week"
    },
    {
      title: "Remediation Rate",
      value: `${remediationRate}%`,
      icon: TrendingUp,
      gradient: "from-green-500 to-emerald-500",
      description: "Non-critical vulnerabilities",
      trend: "+15% improvement"
    },
    {
      title: "Protected Assets",
      value: metrics.totalAssets,
      icon: Shield,
      gradient: "from-blue-500 to-cyan-500",
      description: "Actively monitored",
      trend: "+3 new assets"
    }
  ];

  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {[...Array(4)].map((_, i) => (
          <Card key={i} className="glass-effect border-white/10 animate-pulse">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="h-4 bg-white/20 rounded w-24"></div>
                <div className="w-10 h-10 bg-white/20 rounded-lg"></div>
              </div>
              <div className="h-8 bg-white/20 rounded mb-2"></div>
              <div className="h-3 bg-white/20 rounded w-32"></div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      {metricsData.map((metric, index) => (
        <Card key={metric.title} className="glass-effect border-white/10 hover:border-white/20 transition-all duration-300 group card-hover">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <CardTitle className="text-sm font-medium text-gray-300 group-hover:text-white transition-colors">
                {metric.title}
              </CardTitle>
              <div className={`relative w-12 h-12 rounded-xl bg-gradient-to-br ${metric.gradient} flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-300`}>
                <metric.icon className="h-6 w-6 text-white" />
                <div className={`absolute inset-0 bg-gradient-to-br ${metric.gradient} rounded-xl blur-lg opacity-30 group-hover:opacity-50 transition-all duration-300`}></div>
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="text-3xl font-bold text-white group-hover:scale-105 transition-transform duration-300">
                {metric.value}
              </div>
              <p className="text-sm text-gray-400 group-hover:text-gray-300 transition-colors">
                {metric.description}
              </p>
              <div className="flex items-center gap-2 pt-2">
                <Activity className="h-3 w-3 text-green-400" />
                <span className="text-xs text-green-400 font-medium">{metric.trend}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};
