
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Cell, PieChart, Pie, Legend } from "recharts";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface VulnerabilityData {
  severity: string;
  count: number;
  color: string;
}

interface AssigneeData {
  name: string;
  count: number;
}

interface TrendData {
  date: string;
  count: number;
}

export const NucleiVulnerabilityCharts = () => {
  const [severityData, setSeverityData] = useState<VulnerabilityData[]>([]);
  const [assigneeData, setAssigneeData] = useState<AssigneeData[]>([]);
  const [trendData, setTrendData] = useState<TrendData[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  const fetchChartData = async () => {
    try {
      setLoading(true);

      // Fetch severity distribution
      const { data: severityResults, error: severityError } = await supabase
        .from('nuclei_vulnerabilities')
        .select('severity, count(*)')
        .group('severity');

      if (severityError) throw severityError;

      const severityColors: Record<string, string> = {
        critical: '#ef4444',
        high: '#f97316',
        medium: '#eab308',
        low: '#3b82f6',
        info: '#6b7280',
        unknown: '#94a3b8'
      };

      const formattedSeverityData = severityResults.map(item => ({
        severity: item.severity || 'unknown',
        count: item.count,
        color: severityColors[item.severity?.toLowerCase() || 'unknown'] || '#94a3b8'
      }));

      // Fetch assignee distribution
      const { data: assigneeResults, error: assigneeError } = await supabase
        .rpc('get_vulnerability_counts_by_assignee');

      if (assigneeError) {
        // Fallback to manual count if the function doesn't exist
        const { data: fallbackResults, error: fallbackError } = await supabase
          .from('nuclei_vulnerabilities')
          .select('assigned_to, profiles:assigned_to(first_name, last_name), count(*)')
          .group('assigned_to, profiles.first_name, profiles.last_name');

        if (fallbackError) throw fallbackError;

        const formattedAssigneeData = fallbackResults.map(item => ({
          name: item.profiles ? 
            `${item.profiles.first_name || ''} ${item.profiles.last_name || ''}`.trim() || 'Unknown' : 
            item.assigned_to ? item.assigned_to : 'Unassigned',
          count: item.count
        }));
        
        setAssigneeData(formattedAssigneeData);
      } else {
        setAssigneeData(assigneeResults || []);
      }

      // Fetch trends over time (past 30 days)
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const { data: trendResults, error: trendError } = await supabase
        .from('nuclei_vulnerabilities')
        .select('created_at')
        .gte('created_at', thirtyDaysAgo.toISOString());

      if (trendError) throw trendError;

      // Group by date
      const trendMap = new Map<string, number>();
      
      // Create empty entries for all dates in the past 30 days
      for (let i = 0; i < 30; i++) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        const dateString = date.toISOString().split('T')[0];
        trendMap.set(dateString, 0);
      }
      
      // Fill in actual counts
      trendResults.forEach(item => {
        const dateString = new Date(item.created_at).toISOString().split('T')[0];
        const currentCount = trendMap.get(dateString) || 0;
        trendMap.set(dateString, currentCount + 1);
      });
      
      // Convert map to array and sort by date
      const formattedTrendData = Array.from(trendMap.entries())
        .map(([date, count]) => ({ date, count }))
        .sort((a, b) => a.date.localeCompare(b.date));

      setSeverityData(formattedSeverityData);
      setTrendData(formattedTrendData);
    } catch (error: any) {
      console.error('Error fetching chart data:', error);
      toast({
        title: "Error Loading Charts",
        description: error.message || "Failed to load vulnerability analytics",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchChartData();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <Tabs defaultValue="severity" className="w-full">
      <TabsList className="grid w-full grid-cols-3">
        <TabsTrigger value="severity">Severity Distribution</TabsTrigger>
        <TabsTrigger value="assignee">Assignment Distribution</TabsTrigger>
        <TabsTrigger value="trend">Vulnerability Trends</TabsTrigger>
      </TabsList>
      
      <TabsContent value="severity" className="pt-4">
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Vulnerabilities by Severity</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-col md:flex-row gap-4">
            <div className="w-full md:w-1/2 h-64">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={severityData}>
                  <XAxis dataKey="severity" stroke="#94a3b8" />
                  <YAxis stroke="#94a3b8" />
                  <Tooltip 
                    contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #334155', color: '#f8fafc' }} 
                  />
                  <Bar dataKey="count" name="Count">
                    {severityData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>
            
            <div className="w-full md:w-1/2 h-64">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={severityData}
                    dataKey="count"
                    nameKey="severity"
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    label={(entry) => `${entry.severity}: ${entry.count}`}
                  >
                    {severityData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip 
                    contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #334155', color: '#f8fafc' }} 
                  />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </TabsContent>
      
      <TabsContent value="assignee" className="pt-4">
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Vulnerabilities by Assignee</CardTitle>
          </CardHeader>
          <CardContent className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={assigneeData}>
                <XAxis dataKey="name" stroke="#94a3b8" />
                <YAxis stroke="#94a3b8" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #334155', color: '#f8fafc' }} 
                />
                <Bar dataKey="count" name="Count" fill="#3b82f6" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </TabsContent>
      
      <TabsContent value="trend" className="pt-4">
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Vulnerability Trends (Last 30 Days)</CardTitle>
          </CardHeader>
          <CardContent className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={trendData}>
                <XAxis dataKey="date" stroke="#94a3b8" />
                <YAxis stroke="#94a3b8" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #334155', color: '#f8fafc' }} 
                />
                <Bar dataKey="count" name="New Vulnerabilities" fill="#10b981" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </TabsContent>
    </Tabs>
  );
};
