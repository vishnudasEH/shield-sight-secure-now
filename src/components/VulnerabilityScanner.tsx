
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Textarea } from "@/components/ui/textarea";
import { Scan, Play, Pause, Square, Settings, Network, Globe, Server, Monitor, Upload, Copy } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export const VulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScanType, setSelectedScanType] = useState("quick");
  const [scanName, setScanName] = useState("");
  const [targetInputs, setTargetInputs] = useState("");
  const [outputFileName, setOutputFileName] = useState("");
  const [generatedCommand, setGeneratedCommand] = useState("");
  const { toast } = useToast();

  const scanTypes = [
    { 
      id: "quick", 
      name: "Quick Scan", 
      path: "/nuclei-templates/passive/cves",
      description: "Passive CVE detection scan" 
    },
    { 
      id: "cve", 
      name: "CVE Scan", 
      path: "/nuclei_templates/http/CVE/",
      description: "Comprehensive CVE vulnerability scan" 
    },
    { 
      id: "full", 
      name: "Full Scan", 
      path: "/nuclei_templates/",
      description: "Complete nuclei template scan" 
    },
    { 
      id: "subdomain", 
      name: "Subdomain Takeover", 
      path: "/nuclei-templates/http/takeovers/",
      description: "Subdomain takeover vulnerability scan" 
    },
  ];

  const recentScans = [
    { id: 1, target: "example.com", type: "CVE Scan", status: "Completed", vulnerabilities: 12, started: "2024-01-15 10:30", duration: "25m" },
    { id: 2, target: "10.0.0.50-100", type: "Full Scan", status: "Running", vulnerabilities: 0, started: "2024-01-15 11:15", duration: "45m" },
    { id: 3, target: "testapp.local", type: "Quick Scan", status: "Completed", vulnerabilities: 3, started: "2024-01-15 09:00", duration: "8m" },
  ];

  const generateCommand = () => {
    if (!scanName.trim() || !targetInputs.trim() || !outputFileName.trim()) {
      toast({
        title: "Missing Information",
        description: "Please fill in scan name, targets, and output file name",
        variant: "destructive",
      });
      return;
    }

    const selectedScan = scanTypes.find(scan => scan.id === selectedScanType);
    const templatePath = selectedScan?.path || "/nuclei_templates/";
    
    const command = `nuclei -l {nuclei_target_file} -o ${outputFileName} -silent -stats -jsonl -t ${templatePath} -cloud-upload -scan-name "${scanName}"`;
    
    setGeneratedCommand(command);
    
    toast({
      title: "Command Generated",
      description: "Nuclei command has been generated successfully",
    });
  };

  const copyCommand = () => {
    navigator.clipboard.writeText(generatedCommand);
    toast({
      title: "Copied",
      description: "Command copied to clipboard",
    });
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.txt')) {
      toast({
        title: "Invalid File Type",
        description: "Please upload a .txt file containing target URLs/IPs",
        variant: "destructive",
      });
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      setTargetInputs(content);
      toast({
        title: "File Uploaded",
        description: `Loaded ${content.split('\n').filter(line => line.trim()).length} targets from file`,
      });
    };
    reader.readAsText(file);
  };

  const startScan = async () => {
    if (!generatedCommand) {
      toast({
        title: "No Command Generated",
        description: "Please generate the nuclei command first",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanProgress(0);
    
    toast({
      title: "Scan Started",
      description: `Executing nuclei scan: ${scanName}`,
    });

    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          toast({
            title: "Scan Completed",
            description: "Nuclei scan finished successfully",
          });
          return 100;
        }
        return prev + Math.random() * 8;
      });
    }, 2000);
  };

  const stopScan = () => {
    setIsScanning(false);
    setScanProgress(0);
    toast({
      title: "Scan Stopped",
      description: "Nuclei scan has been terminated",
    });
  };

  const restrictSpaces = (value: string) => {
    return value.replace(/\s/g, '');
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Nuclei Scanner Configuration */}
        <div className="lg:col-span-2">
          <Card className="bg-slate-800 border-slate-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Scan className="h-5 w-5" />
                Nuclei Vulnerability Scanner
              </CardTitle>
              <CardDescription className="text-slate-400">
                Configure and execute nuclei scans against VM at 10.0.0.1
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Scan Type Selection */}
              <div>
                <Label className="text-slate-300 mb-3 block">Scan Type</Label>
                <Select value={selectedScanType} onValueChange={setSelectedScanType}>
                  <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-700 border-slate-600">
                    {scanTypes.map((type) => (
                      <SelectItem key={type.id} value={type.id} className="text-white">
                        <div>
                          <div className="font-medium">{type.name}</div>
                          <div className="text-xs text-slate-400">{type.path}</div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <p className="text-xs text-slate-400 mt-1">
                  {scanTypes.find(type => type.id === selectedScanType)?.description}
                </p>
              </div>

              {/* Scan Options */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="scanName" className="text-slate-300">Scan Name</Label>
                  <Input
                    id="scanName"
                    placeholder="Enter scan name (no spaces)"
                    value={scanName}
                    onChange={(e) => setScanName(restrictSpaces(e.target.value))}
                    className="bg-slate-700 border-slate-600 text-white mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="targets" className="text-slate-300">Target IPs or URLs</Label>
                  <Textarea
                    id="targets"
                    placeholder="Enter targets (one per line)&#10;example.com&#10;192.168.1.100&#10;subdomain.example.com"
                    value={targetInputs}
                    onChange={(e) => setTargetInputs(e.target.value)}
                    className="bg-slate-700 border-slate-600 text-white mt-1 min-h-[100px]"
                  />
                  <div className="flex items-center gap-2 mt-2">
                    <Label htmlFor="targetFile" className="text-slate-400 text-sm cursor-pointer flex items-center gap-1">
                      <Upload className="h-3 w-3" />
                      Upload .txt file
                    </Label>
                    <Input
                      id="targetFile"
                      type="file"
                      accept=".txt"
                      onChange={handleFileUpload}
                      className="hidden"
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="outputFile" className="text-slate-300">Output File Name</Label>
                  <Input
                    id="outputFile"
                    placeholder="scan_results.json"
                    value={outputFileName}
                    onChange={(e) => setOutputFileName(e.target.value)}
                    className="bg-slate-700 border-slate-600 text-white mt-1"
                  />
                </div>
              </div>

              {/* Command Generation */}
              <div className="pt-4 border-t border-slate-700">
                <div className="flex gap-2 mb-4">
                  <Button onClick={generateCommand} variant="outline" className="border-slate-600">
                    <Settings className="h-4 w-4 mr-2" />
                    Generate Command
                  </Button>
                </div>

                {generatedCommand && (
                  <div className="space-y-2">
                    <Label className="text-slate-300">Generated Nuclei Command:</Label>
                    <div className="bg-slate-900 p-3 rounded border border-slate-600 relative">
                      <code className="text-green-400 text-sm break-all">{generatedCommand}</code>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={copyCommand}
                        className="absolute top-2 right-2 h-6 w-6 p-0"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                )}
              </div>

              {/* Scan Controls */}
              <div className="pt-4 border-t border-slate-700">
                {isScanning ? (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-slate-300">Nuclei scan in progress...</span>
                      <Badge variant="secondary" className="bg-blue-500/20 text-blue-400">
                        {scanProgress.toFixed(0)}% Complete
                      </Badge>
                    </div>
                    <Progress value={scanProgress} className="h-2" />
                    <div className="flex gap-2">
                      <Button variant="outline" onClick={stopScan} className="border-slate-600">
                        <Square className="h-4 w-4 mr-2" />
                        Stop Scan
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="flex gap-2">
                    <Button onClick={startScan} className="bg-blue-600 hover:bg-blue-700" disabled={!generatedCommand}>
                      <Play className="h-4 w-4 mr-2" />
                      Execute Scan
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Scan Queue & Status */}
        <div>
          <Card className="bg-slate-800 border-slate-700">
            <CardHeader>
              <CardTitle className="text-white">Recent Nuclei Scans</CardTitle>
              <CardDescription className="text-slate-400">
                Monitor scan status and history
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {recentScans.map((scan) => (
                  <div key={scan.id} className="p-3 rounded-lg bg-slate-700/50 border border-slate-600">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-slate-300 text-sm font-medium">{scan.target}</span>
                      <Badge 
                        variant={scan.status === "Completed" ? "default" : "secondary"}
                        className={scan.status === "Running" ? "bg-blue-500/20 text-blue-400" : ""}
                      >
                        {scan.status}
                      </Badge>
                    </div>
                    <div className="text-xs text-slate-400 space-y-1">
                      <div>Type: {scan.type}</div>
                      <div>Started: {scan.started}</div>
                      <div>Duration: {scan.duration}</div>
                      {scan.vulnerabilities > 0 && (
                        <div className="text-orange-400">
                          {scan.vulnerabilities} vulnerabilities found
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};
