
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Scan, AlertTriangle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { NotificationCenter } from "./NotificationCenter";
import { ScanConfiguration } from "./ScanConfiguration";
import { ScanControls } from "./ScanControls";
import { ResultUpload } from "./ResultUpload";
import { RecentScans } from "./RecentScans";

export const VulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScanType, setSelectedScanType] = useState("quick");
  const [scanName, setScanName] = useState("");
  const [targetInputs, setTargetInputs] = useState("");
  const [refreshScans, setRefreshScans] = useState(false);
  const { toast } = useToast();

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.txt')) {
      toast({
        title: "Invalid File Type",
        description: "Please upload a .txt file containing target URLs/IPs",
        variant: "destructive",
      });
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      setTargetInputs(content);
      toast({
        title: "File Uploaded",
        description: `Loaded ${content.split('\n').filter(line => line.trim()).length} targets from file`,
      });
    };
    reader.readAsText(file);
  };

  const startScan = async () => {
    if (!scanName.trim() || !targetInputs.trim()) {
      toast({
        title: "Missing Information",
        description: "Please fill in scan name and targets",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanProgress(0);
    
    toast({
      title: "Scan Started",
      description: `Executing nuclei scan: ${scanName}`,
    });

    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          toast({
            title: "Scan Completed",
            description: "Nuclei scan finished successfully",
          });
          return 100;
        }
        return prev + Math.random() * 8;
      });
    }, 2000);
  };

  const stopScan = () => {
    setIsScanning(false);
    setScanProgress(0);
    toast({
      title: "Scan Stopped",
      description: "Nuclei scan has been terminated",
    });
  };

  const handleUploadComplete = () => {
    setScanName("");
    setTargetInputs("");
    setRefreshScans(!refreshScans);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-white">Nuclei Vulnerability Scanner</h1>
          <p className="text-slate-400">Configure and execute nuclei scans against target systems</p>
        </div>
        <div className="flex items-center gap-4">
          <NotificationCenter />
          
          <Button 
            variant="outline" 
            size="sm" 
            className="border-slate-600 gap-2"
            asChild
          >
            <a href="/vulnerabilities/nuclei">
              <AlertTriangle className="h-4 w-4" />
              View Vulnerabilities
            </a>
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Nuclei Scanner Configuration */}
        <div className="lg:col-span-2">
          <Card className="bg-slate-800 border-slate-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Scan className="h-5 w-5" />
                Nuclei Vulnerability Scanner
              </CardTitle>
              <CardDescription className="text-slate-400">
                Configure and execute nuclei scans against VM at 10.0.0.1
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <ScanConfiguration
                selectedScanType={selectedScanType}
                setSelectedScanType={setSelectedScanType}
                scanName={scanName}
                setScanName={setScanName}
                targetInputs={targetInputs}
                setTargetInputs={setTargetInputs}
                onFileUpload={handleFileUpload}
              />

              <ScanControls
                isScanning={isScanning}
                scanProgress={scanProgress}
                onStartScan={startScan}
                onStopScan={stopScan}
              />

              <ResultUpload
                scanName={scanName}
                selectedScanType={selectedScanType}
                onUploadComplete={handleUploadComplete}
              />
            </CardContent>
          </Card>
        </div>

        {/* Scan Queue & Status */}
        <div>
          <RecentScans refreshTrigger={refreshScans} />
        </div>
      </div>
    </div>
  );
};
