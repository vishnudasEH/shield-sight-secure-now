
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Scan, Play, Pause, Square, Settings, Network, Globe, Server, Monitor } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export const VulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScanType, setSelectedScanType] = useState("network");
  const [targetInput, setTargetInput] = useState("");
  const { toast } = useToast();

  const scanTypes = [
    { id: "network", name: "Network Scan", icon: Network, description: "Scan network infrastructure for vulnerabilities" },
    { id: "web", name: "Web Application", icon: Globe, description: "Comprehensive web application security testing" },
    { id: "infrastructure", name: "Infrastructure", icon: Server, description: "Server and system configuration analysis" },
    { id: "endpoint", name: "Endpoint", icon: Monitor, description: "Endpoint security and compliance scanning" },
  ];

  const scanProfiles = [
    { id: "quick", name: "Quick Scan", duration: "5-10 minutes", coverage: "Basic" },
    { id: "standard", name: "Standard Scan", duration: "30-60 minutes", coverage: "Comprehensive" },
    { id: "deep", name: "Deep Scan", duration: "2-4 hours", coverage: "Exhaustive" },
    { id: "custom", name: "Custom Profile", duration: "Variable", coverage: "Configurable" },
  ];

  const recentScans = [
    { id: 1, target: "192.168.1.0/24", type: "Network", status: "Completed", vulnerabilities: 23, started: "2024-01-15 10:30", duration: "45m" },
    { id: 2, target: "app.company.com", type: "Web App", status: "Running", vulnerabilities: 0, started: "2024-01-15 11:15", duration: "15m" },
    { id: 3, target: "prod-server-01", type: "Infrastructure", status: "Completed", vulnerabilities: 8, started: "2024-01-15 09:00", duration: "1h 20m" },
  ];

  const startScan = () => {
    if (!targetInput.trim()) {
      toast({
        title: "Error",
        description: "Please enter a target for scanning",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanProgress(0);
    
    toast({
      title: "Scan Started",
      description: `Initiating ${selectedScanType} scan for ${targetInput}`,
    });

    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          toast({
            title: "Scan Completed",
            description: "Vulnerability scan finished successfully",
          });
          return 100;
        }
        return prev + Math.random() * 10;
      });
    }, 1000);
  };

  const stopScan = () => {
    setIsScanning(false);
    setScanProgress(0);
    toast({
      title: "Scan Stopped",
      description: "Vulnerability scan has been terminated",
    });
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Scan Configuration */}
        <div className="lg:col-span-2">
          <Card className="bg-slate-800 border-slate-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Scan className="h-5 w-5" />
                Vulnerability Scanner
              </CardTitle>
              <CardDescription className="text-slate-400">
                Configure and execute security scans across your infrastructure
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Scan Type Selection */}
              <div>
                <Label className="text-slate-300 mb-3 block">Scan Type</Label>
                <div className="grid grid-cols-2 gap-3">
                  {scanTypes.map((type) => (
                    <div
                      key={type.id}
                      className={`p-3 rounded-lg border cursor-pointer transition-colors ${
                        selectedScanType === type.id
                          ? "border-blue-500 bg-blue-500/10"
                          : "border-slate-600 bg-slate-700/50 hover:border-slate-500"
                      }`}
                      onClick={() => setSelectedScanType(type.id)}
                    >
                      <div className="flex items-center gap-2 mb-2">
                        <type.icon className="h-4 w-4 text-blue-400" />
                        <span className="text-slate-300 font-medium">{type.name}</span>
                      </div>
                      <p className="text-xs text-slate-400">{type.description}</p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Target Configuration */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="target" className="text-slate-300">Scan Target</Label>
                  <Input
                    id="target"
                    placeholder="192.168.1.0/24, example.com, or server hostname"
                    value={targetInput}
                    onChange={(e) => setTargetInput(e.target.value)}
                    className="bg-slate-700 border-slate-600 text-white mt-1"
                  />
                </div>

                <div>
                  <Label className="text-slate-300">Scan Profile</Label>
                  <Select defaultValue="standard">
                    <SelectTrigger className="bg-slate-700 border-slate-600 text-white mt-1">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-700 border-slate-600">
                      {scanProfiles.map((profile) => (
                        <SelectItem key={profile.id} value={profile.id} className="text-white">
                          {profile.name} - {profile.duration}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Advanced Options */}
              <div className="space-y-3">
                <Label className="text-slate-300">Scan Options</Label>
                <div className="space-y-2">
                  {[
                    "Enable aggressive testing",
                    "Include authenticated scans",
                    "Test for DoS vulnerabilities",
                    "Generate detailed report",
                    "Auto-assign remediation",
                  ].map((option) => (
                    <div key={option} className="flex items-center space-x-2">
                      <Checkbox id={option} className="border-slate-600" />
                      <Label htmlFor={option} className="text-slate-400 text-sm">
                        {option}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>

              {/* Scan Controls */}
              <div className="pt-4 border-t border-slate-700">
                {isScanning ? (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-slate-300">Scanning in progress...</span>
                      <Badge variant="secondary" className="bg-blue-500/20 text-blue-400">
                        {scanProgress.toFixed(0)}% Complete
                      </Badge>
                    </div>
                    <Progress value={scanProgress} className="h-2" />
                    <div className="flex gap-2">
                      <Button variant="outline" onClick={stopScan} className="border-slate-600">
                        <Square className="h-4 w-4 mr-2" />
                        Stop Scan
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="flex gap-2">
                    <Button onClick={startScan} className="bg-blue-600 hover:bg-blue-700">
                      <Play className="h-4 w-4 mr-2" />
                      Start Scan
                    </Button>
                    <Button variant="outline" className="border-slate-600">
                      <Settings className="h-4 w-4 mr-2" />
                      Advanced
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Scan Queue & Status */}
        <div>
          <Card className="bg-slate-800 border-slate-700">
            <CardHeader>
              <CardTitle className="text-white">Recent Scans</CardTitle>
              <CardDescription className="text-slate-400">
                Monitor scan status and history
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {recentScans.map((scan) => (
                  <div key={scan.id} className="p-3 rounded-lg bg-slate-700/50 border border-slate-600">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-slate-300 text-sm font-medium">{scan.target}</span>
                      <Badge 
                        variant={scan.status === "Completed" ? "default" : "secondary"}
                        className={scan.status === "Running" ? "bg-blue-500/20 text-blue-400" : ""}
                      >
                        {scan.status}
                      </Badge>
                    </div>
                    <div className="text-xs text-slate-400 space-y-1">
                      <div>Type: {scan.type}</div>
                      <div>Started: {scan.started}</div>
                      <div>Duration: {scan.duration}</div>
                      {scan.vulnerabilities > 0 && (
                        <div className="text-orange-400">
                          {scan.vulnerabilities} vulnerabilities found
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};
