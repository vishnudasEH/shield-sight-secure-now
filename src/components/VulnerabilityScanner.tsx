
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { AlertTriangle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/hooks/useAuth";
import { NotificationCenter } from "./NotificationCenter";
import { ScanConfiguration } from "./VulnerabilityScanner/components/ScanConfiguration";
import { ResultUpload } from "./VulnerabilityScanner/components/ResultUpload";
import { RecentScans } from "./VulnerabilityScanner/components/RecentScans";
import { useScanOperations } from "./VulnerabilityScanner/hooks/useScanOperations";
import { RecentScan } from "./VulnerabilityScanner/types/scanTypes";

export const VulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScanType, setSelectedScanType] = useState("quick");
  const [scanName, setScanName] = useState("");
  const [targetInputs, setTargetInputs] = useState("");
  const [isUploading, setIsUploading] = useState(false);
  const [recentScans, setRecentScans] = useState<RecentScan[]>([]);
  const { toast } = useToast();
  const { user, profile } = useAuth();
  const { handleFileUpload, handleResultUpload } = useScanOperations();

  useEffect(() => {
    fetchRecentScans();
  }, []);

  const fetchRecentScans = async () => {
    try {
      const { data, error } = await supabase
        .from('nuclei_scan_results')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(5);
      
      if (error) throw error;
      
      const scansWithStats = await Promise.all(
        (data || []).map(async scan => {
          // Get vulnerability counts
          const { count, error: countError } = await supabase
            .from('nuclei_vulnerabilities')
            .select('*', { count: 'exact', head: true })
            .eq('scan_id', scan.id);
          
          if (countError) throw countError;
          
          return {
            ...scan,
            vulnerabilities: count || 0
          };
        })
      );
      
      setRecentScans(scansWithStats);
    } catch (error) {
      console.error('Error fetching recent scans:', error);
    }
  };

  const startScan = async () => {
    if (!scanName.trim() || !targetInputs.trim()) {
      toast({
        title: "Missing Information",
        description: "Please fill in scan name and targets",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanProgress(0);
    
    toast({
      title: "Scan Started",
      description: `Executing nuclei scan: ${scanName}`,
    });

    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          toast({
            title: "Scan Completed",
            description: "Nuclei scan finished successfully",
          });
          return 100;
        }
        return prev + Math.random() * 8;
      });
    }, 2000);
  };

  const stopScan = () => {
    setIsScanning(false);
    setScanProgress(0);
    toast({
      title: "Scan Stopped",
      description: "Nuclei scan has been terminated",
    });
  };

  const onFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    handleFileUpload(event, setTargetInputs);
  };

  const onResultUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    handleResultUpload(
      event,
      scanName,
      selectedScanType,
      setScanName,
      setTargetInputs,
      setIsUploading,
      fetchRecentScans
    );
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-white">Nuclei Vulnerability Scanner</h1>
          <p className="text-slate-400">Configure and execute nuclei scans against target systems</p>
        </div>
        <div className="flex items-center gap-4">
          <NotificationCenter />
          
          <Button 
            variant="outline" 
            size="sm" 
            className="border-slate-600 gap-2"
            asChild
          >
            <a href="/vulnerabilities/nuclei">
              <AlertTriangle className="h-4 w-4" />
              View Vulnerabilities
            </a>
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Nuclei Scanner Configuration */}
        <div className="lg:col-span-2 space-y-6">
          <ScanConfiguration
            selectedScanType={selectedScanType}
            setSelectedScanType={setSelectedScanType}
            scanName={scanName}
            setScanName={setScanName}
            targetInputs={targetInputs}
            setTargetInputs={setTargetInputs}
            isScanning={isScanning}
            scanProgress={scanProgress}
            startScan={startScan}
            stopScan={stopScan}
            handleFileUpload={onFileUpload}
          />
          
          <ResultUpload
            isUploading={isUploading}
            handleResultUpload={onResultUpload}
          />
        </div>

        {/* Scan Queue & Status */}
        <div>
          <RecentScans recentScans={recentScans} />
        </div>
      </div>
    </div>
  );
};
