
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { AlertTriangle, Shield, TrendingUp, Clock, CheckCircle, XCircle } from "lucide-react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar } from "recharts";
import { NessusFileUpload } from "./NessusFileUpload";
import { VulnerabilityMetrics } from "./VulnerabilityMetrics";
import { useEffect, useState } from "react";
import { supabase } from "@/integrations/supabase/client";

const vulnerabilityTrends = [
  { month: "Jan", critical: 12, high: 24, medium: 45, low: 23 },
  { month: "Feb", critical: 8, high: 19, medium: 38, low: 28 },
  { month: "Mar", critical: 15, high: 31, medium: 52, low: 35 },
  { month: "Apr", critical: 6, high: 22, medium: 41, low: 29 },
  { month: "May", critical: 9, high: 18, medium: 35, low: 25 },
  { month: "Jun", critical: 4, high: 15, medium: 28, low: 22 },
];

const remediationProgress = [
  { category: "Network", completed: 85, total: 100 },
  { category: "Web Apps", completed: 72, total: 95 },
  { category: "Infrastructure", completed: 91, total: 98 },
  { category: "Endpoints", completed: 68, total: 89 },
];

export const VulnerabilityDashboard = () => {
  const [riskDistribution, setRiskDistribution] = useState([
    { name: "Critical", value: 0, color: "#dc2626" },
    { name: "High", value: 0, color: "#ea580c" },
    { name: "Medium", value: 0, color: "#d97706" },
    { name: "Low", value: 0, color: "#65a30d" },
    { name: "Info", value: 0, color: "#6b7280" },
  ]);

  useEffect(() => {
    const fetchRiskDistribution = async () => {
      try {
        const { data: vulnerabilities, error } = await supabase
          .from('nessus_vulnerabilities')
          .select('severity');

        if (error) throw error;

        const severityCounts = {
          Critical: 0,
          High: 0,
          Medium: 0,
          Low: 0,
          Info: 0
        };

        vulnerabilities?.forEach(vuln => {
          if (severityCounts.hasOwnProperty(vuln.severity)) {
            severityCounts[vuln.severity as keyof typeof severityCounts]++;
          }
        });

        setRiskDistribution([
          { name: "Critical", value: severityCounts.Critical, color: "#dc2626" },
          { name: "High", value: severityCounts.High, color: "#ea580c" },
          { name: "Medium", value: severityCounts.Medium, color: "#d97706" },
          { name: "Low", value: severityCounts.Low, color: "#65a30d" },
          { name: "Info", value: severityCounts.Info, color: "#6b7280" },
        ]);
      } catch (error) {
        console.error('Error fetching risk distribution:', error);
      }
    };

    fetchRiskDistribution();
  }, []);

  return (
    <div className="space-y-6">
      {/* File Upload Section - Only Nessus XML */}
      <NessusFileUpload />

      {/* Key Metrics - Using real data */}
      <VulnerabilityMetrics />

      {/* Charts Row */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Vulnerability Trends */}
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Vulnerability Trends</CardTitle>
            <CardDescription className="text-slate-400">
              Monthly vulnerability detection by severity
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={vulnerabilityTrends}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="month" stroke="#9CA3AF" />
                <YAxis stroke="#9CA3AF" />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#1F2937', 
                    border: '1px solid #374151',
                    borderRadius: '6px'
                  }}
                />
                <Line type="monotone" dataKey="critical" stroke="#dc2626" strokeWidth={2} />
                <Line type="monotone" dataKey="high" stroke="#ea580c" strokeWidth={2} />
                <Line type="monotone" dataKey="medium" stroke="#d97706" strokeWidth={2} />
                <Line type="monotone" dataKey="low" stroke="#65a30d" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Risk Distribution - Using real data */}
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Risk Distribution</CardTitle>
            <CardDescription className="text-slate-400">
              Current vulnerabilities by severity level from uploaded Nessus data
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={riskDistribution.filter(item => item.value > 0)}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {riskDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Remediation Progress */}
      <Card className="bg-slate-800 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Remediation Progress by Category</CardTitle>
          <CardDescription className="text-slate-400">
            Track remediation efforts across different asset categories
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {remediationProgress.map((item) => {
              const percentage = (item.completed / item.total) * 100;
              return (
                <div key={item.category} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-slate-300 font-medium">{item.category}</span>
                    <span className="text-slate-400 text-sm">
                      {item.completed}/{item.total} ({percentage.toFixed(0)}%)
                    </span>
                  </div>
                  <Progress value={percentage} className="h-2" />
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Recent Activity */}
      <Card className="bg-slate-800 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Recent Activity</CardTitle>
          <CardDescription className="text-slate-400">
            Latest vulnerability management activities
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[
              { action: "Critical vulnerability patched", target: "Web Server #3", time: "2 minutes ago", type: "success" },
              { action: "New scan completed", target: "Production Network", time: "15 minutes ago", type: "info" },
              { action: "High severity issue detected", target: "Database Server", time: "1 hour ago", type: "warning" },
              { action: "Remediation assigned", target: "CVE-2024-1234", time: "2 hours ago", type: "info" },
              { action: "False positive marked", target: "API Gateway", time: "4 hours ago", type: "neutral" },
            ].map((activity, index) => (
              <div key={index} className="flex items-center gap-3 p-3 rounded-lg bg-slate-700/50">
                {activity.type === "success" && <CheckCircle className="h-4 w-4 text-green-500" />}
                {activity.type === "warning" && <AlertTriangle className="h-4 w-4 text-orange-500" />}
                {activity.type === "info" && <Shield className="h-4 w-4 text-blue-500" />}
                {activity.type === "neutral" && <XCircle className="h-4 w-4 text-slate-500" />}
                <div className="flex-1">
                  <p className="text-slate-300 text-sm">{activity.action}</p>
                  <p className="text-slate-500 text-xs">{activity.target}</p>
                </div>
                <span className="text-slate-400 text-xs">{activity.time}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
