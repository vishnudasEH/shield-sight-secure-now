
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  Clock, 
  AlertTriangle, 
  TrendingUp, 
  Calendar, 
  Search,
  Download,
  Expand
} from "lucide-react";
import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, BarChart, Bar } from "recharts";
import { slaService, VulnerabilityAgingRecord, SLABreachTrend } from "@/services/slaService";

interface SLASummary {
  totalVulnerabilities: number;
  totalBreaches: number;
  breachesBySeverity: {
    Critical: number;
    High: number;
    Medium: number;
    Low: number;
  };
  averageAge: {
    Critical: number;
    High: number;
    Medium: number;
    Low: number;
  };
}

export const SLAVulnerabilityAging = () => {
  const [agingData, setAgingData] = useState<VulnerabilityAgingRecord[]>([]);
  const [trendData, setTrendData] = useState<SLABreachTrend[]>([]);
  const [slaSummary, setSLASummary] = useState<SLASummary | null>(null);
  const [loading, setLoading] = useState(true);
  
  // Filters
  const [hostnameFilter, setHostnameFilter] = useState("");
  const [severityFilter, setSeverityFilter] = useState("");
  const [breachOnlyFilter, setBreachOnlyFilter] = useState(false);

  useEffect(() => {
    fetchSLAData();
  }, [hostnameFilter, severityFilter, breachOnlyFilter]);

  const fetchSLAData = async () => {
    try {
      setLoading(true);
      
      const [aging, trends, summary] = await Promise.all([
        slaService.getVulnerabilityAging({
          hostname: hostnameFilter || undefined,
          severity: severityFilter || undefined,
          slaBreachOnly: breachOnlyFilter
        }),
        slaService.getSLABreachTrends(30),
        slaService.getSLASummary()
      ]);

      setAgingData(aging);
      setTrendData(trends);
      setSLASummary(summary);
    } catch (error) {
      console.error('Error fetching SLA data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-500/20 text-red-400';
      case 'high': return 'bg-orange-500/20 text-orange-400';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400';
      default: return 'bg-green-500/20 text-green-400';
    }
  };

  const getAgeColor = (ageDays: number, slaTargetDays: number) => {
    const ratio = ageDays / slaTargetDays;
    if (ratio > 1) return 'text-red-400';
    if (ratio > 0.8) return 'text-orange-400';
    if (ratio > 0.6) return 'text-yellow-400';
    return 'text-green-400';
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <p className="text-slate-400 mt-2">Loading SLA data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-white flex items-center gap-2">
            <Clock className="h-5 w-5" />
            SLA & Vulnerability Aging
          </h3>
          <p className="text-slate-400">Track vulnerability aging and SLA compliance across scan uploads</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" className="border-slate-600">
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Button variant="outline" className="border-slate-600">
            <Expand className="h-4 w-4 mr-2" />
            Expand View
          </Button>
        </div>
      </div>

      {/* SLA Summary Cards */}
      {slaSummary && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Total Vulnerabilities</p>
                  <p className="text-2xl font-bold text-white">{slaSummary.totalVulnerabilities}</p>
                </div>
                <Clock className="h-8 w-8 text-blue-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">SLA Breaches</p>
                  <p className="text-2xl font-bold text-red-400">{slaSummary.totalBreaches}</p>
                </div>
                <AlertTriangle className="h-8 w-8 text-red-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Breach Rate</p>
                  <p className="text-2xl font-bold text-orange-400">
                    {slaSummary.totalVulnerabilities > 0 
                      ? Math.round((slaSummary.totalBreaches / slaSummary.totalVulnerabilities) * 100)
                      : 0}%
                  </p>
                </div>
                <TrendingUp className="h-8 w-8 text-orange-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Avg Critical Age</p>
                  <p className="text-2xl font-bold text-white">{slaSummary.averageAge.Critical}d</p>
                </div>
                <Calendar className="h-8 w-8 text-purple-400" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">SLA Breach Trends</CardTitle>
            <CardDescription className="text-slate-400">
              Breach count over time (last 30 days)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={trendData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="scan_date" 
                  stroke="#9CA3AF"
                  tickFormatter={(value) => new Date(value).toLocaleDateString()}
                />
                <YAxis stroke="#9CA3AF" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }}
                  labelFormatter={(value) => `Date: ${new Date(value).toLocaleDateString()}`}
                />
                <Line 
                  type="monotone" 
                  dataKey="total_breaches" 
                  stroke="#EF4444" 
                  strokeWidth={2}
                  name="Total Breaches"
                />
                <Line 
                  type="monotone" 
                  dataKey="critical_breaches" 
                  stroke="#DC2626" 
                  strokeWidth={2}
                  name="Critical Breaches"
                />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Breaches by Severity</CardTitle>
            <CardDescription className="text-slate-400">
              Current SLA breach distribution
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={slaSummary ? [
                { name: 'Critical', value: slaSummary.breachesBySeverity.Critical, color: '#DC2626' },
                { name: 'High', value: slaSummary.breachesBySeverity.High, color: '#EA580C' },
                { name: 'Medium', value: slaSummary.breachesBySeverity.Medium, color: '#D97706' },
                { name: 'Low', value: slaSummary.breachesBySeverity.Low, color: '#65A30D' },
              ] : []}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="name" stroke="#9CA3AF" />
                <YAxis stroke="#9CA3AF" />
                <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }} />
                <Bar dataKey="value" fill="#3B82F6" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card className="bg-slate-800 border-slate-700">
        <CardContent className="p-4">
          <div className="flex flex-wrap gap-4 items-center">
            <div className="relative flex-1 min-w-48">
              <Search className="absolute left-3 top-3 h-4 w-4 text-slate-400" />
              <Input
                placeholder="Filter by hostname..."
                value={hostnameFilter}
                onChange={(e) => setHostnameFilter(e.target.value)}
                className="pl-10 bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <Select value={severityFilter} onValueChange={setSeverityFilter}>
              <SelectTrigger className="w-48 bg-slate-700 border-slate-600 text-white">
                <SelectValue placeholder="All Severities" />
              </SelectTrigger>
              <SelectContent className="bg-slate-700 border-slate-600">
                <SelectItem value="">All Severities</SelectItem>
                <SelectItem value="Critical">Critical</SelectItem>
                <SelectItem value="High">High</SelectItem>
                <SelectItem value="Medium">Medium</SelectItem>
                <SelectItem value="Low">Low</SelectItem>
              </SelectContent>
            </Select>
            <div className="flex items-center space-x-2">
              <Checkbox
                id="breachOnly"
                checked={breachOnlyFilter}
                onCheckedChange={setBreachOnlyFilter}
              />
              <label htmlFor="breachOnly" className="text-sm text-slate-300">
                SLA Breaches Only
              </label>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Vulnerability Aging Table */}
      <Card className="bg-slate-800 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Vulnerability Aging Details</CardTitle>
          <CardDescription className="text-slate-400">
            Detailed view of vulnerability age and SLA compliance
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-slate-700">
                  <th className="text-left p-3 text-slate-300">Hostname</th>
                  <th className="text-left p-3 text-slate-300">Plugin Name</th>
                  <th className="text-left p-3 text-slate-300">Severity</th>
                  <th className="text-left p-3 text-slate-300">Age (Days)</th>
                  <th className="text-left p-3 text-slate-300">SLA Target</th>
                  <th className="text-left p-3 text-slate-300">Status</th>
                  <th className="text-left p-3 text-slate-300">First Detected</th>
                  <th className="text-left p-3 text-slate-300">Last Seen</th>
                </tr>
              </thead>
              <tbody>
                {agingData.slice(0, 20).map((record) => (
                  <tr key={record.id} className="border-b border-slate-700/50 hover:bg-slate-700/50">
                    <td className="p-3 text-slate-300 font-medium">{record.hostname}</td>
                    <td className="p-3 text-slate-300 max-w-64 truncate">{record.plugin_name}</td>
                    <td className="p-3">
                      <Badge className={getSeverityColor(record.severity)}>
                        {record.severity}
                      </Badge>
                    </td>
                    <td className="p-3">
                      <span className={getAgeColor(record.age_days, record.sla_target_days)}>
                        {record.age_days}
                      </span>
                    </td>
                    <td className="p-3 text-slate-400">{record.sla_target_days}</td>
                    <td className="p-3">
                      {record.is_sla_breach ? (
                        <Badge className="bg-red-500/20 text-red-400">
                          <AlertTriangle className="h-3 w-3 mr-1" />
                          Breach
                        </Badge>
                      ) : (
                        <Badge className="bg-green-500/20 text-green-400">
                          Compliant
                        </Badge>
                      )}
                    </td>
                    <td className="p-3 text-slate-400 text-sm">
                      {new Date(record.first_detected_date).toLocaleDateString()}
                    </td>
                    <td className="p-3 text-slate-400 text-sm">
                      {new Date(record.last_seen_date).toLocaleDateString()}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {agingData.length > 20 && (
              <div className="text-center p-4">
                <p className="text-slate-400">Showing 20 of {agingData.length} records</p>
                <Button variant="outline" className="mt-2 border-slate-600">
                  Load More
                </Button>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
