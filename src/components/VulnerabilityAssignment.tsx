
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { UserPlus, Search, Calendar, AlertTriangle } from "lucide-react";
import { useForm } from "react-hook-form";
import { supabase } from "@/integrations/supabase/client";
import { usePagination } from "@/hooks/usePagination";
import { PaginationControls } from "./PaginationControls";

interface VulnerabilityAssignment {
  id: string;
  vulnerability_id: string;
  plugin_name: string;
  severity: string;
  host: string;
  assigned_to: string;
  assigned_by: string;
  assigned_date: string;
  due_date: string;
  status: string;
  notes: string;
}

interface AssignmentFormData {
  assigned_to: string;
  due_date: string;
  priority: string;
  notes: string;
}

export const VulnerabilityAssignment = () => {
  const [assignments, setAssignments] = useState<VulnerabilityAssignment[]>([]);
  const [vulnerabilities, setVulnerabilities] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedVuln, setSelectedVuln] = useState<any>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterSeverity, setFilterSeverity] = useState("all");
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const form = useForm<AssignmentFormData>({
    defaultValues: {
      assigned_to: "",
      due_date: "",
      priority: "Medium",
      notes: ""
    }
  });

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.plugin_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.host?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSeverity = filterSeverity === "all" || vuln.severity === filterSeverity;
    return matchesSearch && matchesSeverity;
  });

  const pagination = usePagination({
    data: filteredVulnerabilities,
    itemsPerPage: 10
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      // Fetch vulnerabilities
      const { data: vulnData, error: vulnError } = await supabase
        .from('nessus_vulnerabilities')
        .select('*')
        .order('created_at', { ascending: false });

      if (vulnError) throw vulnError;
      setVulnerabilities(vulnData || []);

      // Fetch existing assignments (mock data for now)
      const mockAssignments: VulnerabilityAssignment[] = [
        {
          id: "1",
          vulnerability_id: vulnData?.[0]?.id || "",
          plugin_name: vulnData?.[0]?.plugin_name || "",
          severity: vulnData?.[0]?.severity || "",
          host: vulnData?.[0]?.host || "",
          assigned_to: "john.doe@company.com",
          assigned_by: "admin@company.com",
          assigned_date: new Date().toISOString().split('T')[0],
          due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          status: "In Progress",
          notes: "High priority vulnerability requiring immediate attention"
        }
      ];
      setAssignments(mockAssignments);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const onSubmit = async (data: AssignmentFormData) => {
    if (!selectedVuln) return;

    const newAssignment: VulnerabilityAssignment = {
      id: Date.now().toString(),
      vulnerability_id: selectedVuln.id,
      plugin_name: selectedVuln.plugin_name,
      severity: selectedVuln.severity,
      host: selectedVuln.host,
      assigned_to: data.assigned_to,
      assigned_by: "current.user@company.com",
      assigned_date: new Date().toISOString().split('T')[0],
      due_date: data.due_date,
      status: "Assigned",
      notes: data.notes
    };

    setAssignments(prev => [newAssignment, ...prev]);
    setIsDialogOpen(false);
    form.reset();
    setSelectedVuln(null);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'bg-red-500/20 text-red-400';
      case 'high': return 'bg-orange-500/20 text-orange-400';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400';
      case 'low': return 'bg-green-500/20 text-green-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'assigned': return 'bg-blue-500/20 text-blue-400';
      case 'in progress': return 'bg-yellow-500/20 text-yellow-400';
      case 'completed': return 'bg-green-500/20 text-green-400';
      case 'overdue': return 'bg-red-500/20 text-red-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  if (loading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
        <p className="text-slate-400 mt-2">Loading assignment data...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white">Vulnerability Assignment</h2>
          <p className="text-slate-400">Assign vulnerabilities to team members for remediation</p>
        </div>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button className="bg-blue-600 hover:bg-blue-700">
              <UserPlus className="h-4 w-4 mr-2" />
              Assign Vulnerability
            </Button>
          </DialogTrigger>
          <DialogContent className="bg-slate-800 border-slate-700 max-w-2xl">
            <DialogHeader>
              <DialogTitle className="text-white">Assign Vulnerability</DialogTitle>
              <DialogDescription className="text-slate-400">
                Select a vulnerability and assign it to a team member
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-slate-300">Select Vulnerability</label>
                <div className="space-y-2">
                  <div className="flex gap-2">
                    <div className="relative flex-1">
                      <Search className="absolute left-3 top-3 h-4 w-4 text-slate-400" />
                      <Input
                        placeholder="Search vulnerabilities..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10 bg-slate-700 border-slate-600 text-white"
                      />
                    </div>
                    <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                      <SelectTrigger className="w-32 bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-slate-700 border-slate-600">
                        <SelectItem value="all">All</SelectItem>
                        <SelectItem value="Critical">Critical</SelectItem>
                        <SelectItem value="High">High</SelectItem>
                        <SelectItem value="Medium">Medium</SelectItem>
                        <SelectItem value="Low">Low</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="max-h-40 overflow-y-auto space-y-2">
                    {pagination.currentData.map((vuln) => (
                      <div
                        key={vuln.id}
                        className={`p-3 rounded-lg border cursor-pointer transition-colors ${
                          selectedVuln?.id === vuln.id
                            ? 'border-blue-500 bg-blue-500/10'
                            : 'border-slate-600 bg-slate-700/50 hover:border-slate-500'
                        }`}
                        onClick={() => setSelectedVuln(vuln)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex-1">
                            <h4 className="text-sm font-medium text-white truncate">
                              {vuln.plugin_name}
                            </h4>
                            <p className="text-xs text-slate-400">{vuln.host}</p>
                          </div>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {vuln.severity}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <PaginationControls
                    currentPage={pagination.currentPage}
                    totalPages={pagination.totalPages}
                    totalItems={pagination.totalItems}
                    startIndex={pagination.startIndex}
                    endIndex={pagination.endIndex}
                    itemsPerPage={pagination.itemsPerPage}
                    onPageChange={pagination.goToPage}
                    hasNext={pagination.hasNext}
                    hasPrev={pagination.hasPrev}
                  />
                </div>
              </div>

              {selectedVuln && (
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                    <div className="p-3 bg-slate-700/50 rounded-lg">
                      <h4 className="text-sm font-medium text-white mb-2">Selected Vulnerability</h4>
                      <p className="text-sm text-slate-300">{selectedVuln.plugin_name}</p>
                      <p className="text-xs text-slate-400">{selectedVuln.host}</p>
                    </div>

                    <FormField
                      control={form.control}
                      name="assigned_to"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Assign To (Email)</FormLabel>
                          <FormControl>
                            <Input
                              {...field}
                              placeholder="user@company.com"
                              className="bg-slate-700 border-slate-600 text-white"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="due_date"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Due Date</FormLabel>
                          <FormControl>
                            <Input
                              {...field}
                              type="date"
                              className="bg-slate-700 border-slate-600 text-white"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="priority"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Priority</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                                <SelectValue />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent className="bg-slate-700 border-slate-600">
                              <SelectItem value="Low">Low</SelectItem>
                              <SelectItem value="Medium">Medium</SelectItem>
                              <SelectItem value="High">High</SelectItem>
                              <SelectItem value="Critical">Critical</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="notes"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Notes</FormLabel>
                          <FormControl>
                            <Textarea
                              {...field}
                              placeholder="Additional notes or instructions..."
                              className="bg-slate-700 border-slate-600 text-white"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className="flex gap-2 pt-4">
                      <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                        Assign Vulnerability
                      </Button>
                      <Button 
                        type="button" 
                        variant="outline" 
                        onClick={() => setIsDialogOpen(false)}
                        className="border-slate-600"
                      >
                        Cancel
                      </Button>
                    </div>
                  </form>
                </Form>
              )}
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Current Assignments */}
      <Card className="bg-slate-800 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Current Assignments</CardTitle>
          <CardDescription className="text-slate-400">
            Active vulnerability assignments and their status
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {assignments.map((assignment) => (
              <div key={assignment.id} className="p-4 rounded-lg bg-slate-700/50 border border-slate-600">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex-1">
                    <h3 className="text-white font-medium">{assignment.plugin_name}</h3>
                    <p className="text-slate-400 text-sm">{assignment.host}</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge className={getSeverityColor(assignment.severity)}>
                      {assignment.severity}
                    </Badge>
                    <Badge className={getStatusColor(assignment.status)}>
                      {assignment.status}
                    </Badge>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="text-slate-400">Assigned To:</span>
                    <span className="ml-2 text-slate-300">{assignment.assigned_to}</span>
                  </div>
                  <div>
                    <span className="text-slate-400">Due Date:</span>
                    <span className="ml-2 text-slate-300">{assignment.due_date}</span>
                  </div>
                  <div>
                    <span className="text-slate-400">Assigned Date:</span>
                    <span className="ml-2 text-slate-300">{assignment.assigned_date}</span>
                  </div>
                  <div>
                    <span className="text-slate-400">Assigned By:</span>
                    <span className="ml-2 text-slate-300">{assignment.assigned_by}</span>
                  </div>
                </div>
                
                {assignment.notes && (
                  <div className="mt-3 p-2 bg-slate-600/50 rounded text-sm">
                    <span className="text-slate-400">Notes:</span>
                    <span className="ml-2 text-slate-300">{assignment.notes}</span>
                  </div>
                )}
              </div>
            ))}
            
            {assignments.length === 0 && (
              <div className="text-center py-8 text-slate-400">
                <AlertTriangle className="h-8 w-8 mx-auto mb-2" />
                <p>No vulnerabilities assigned yet</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
