import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { AlertTriangle, Search, Calendar } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { supabase } from "@/integrations/supabase/client";
import { usePagination } from "@/hooks/usePagination";
import { PaginationControls } from "./PaginationControls";

interface Vulnerability {
  id: string;
  plugin_id: string;
  plugin_name: string;
  severity: string;
  host: string;
  port: string;
  protocol: string;
  description: string;
  solution: string;
  synopsis: string;
  cvss_score: string;
  cve: string[];
  created_at: string;
}

export const VulnerabilityList = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedSeverity, setSelectedSeverity] = useState("all");

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.plugin_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.plugin_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.host.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSeverity = selectedSeverity === "all" || vuln.severity === selectedSeverity;
    
    return matchesSearch && matchesSeverity;
  });

  const {
    currentData: currentVulnerabilities,
    currentPage,
    totalPages,
    totalItems,
    startIndex,
    endIndex,
    itemsPerPage,
    goToPage,
    nextPage,
    prevPage,
    hasNext,
    hasPrev
  } = usePagination({ data: filteredVulnerabilities, itemsPerPage: 100 });

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const fetchVulnerabilities = async () => {
    try {
      const { data, error } = await supabase
        .from('nessus_vulnerabilities')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setVulnerabilities(data || []);
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "bg-red-500/20 text-red-400 border-red-500/50";
      case "High": return "bg-orange-500/20 text-orange-400 border-orange-500/50";
      case "Medium": return "bg-yellow-500/20 text-yellow-400 border-yellow-500/50";
      case "Low": return "bg-green-500/20 text-green-400 border-green-500/50";
      case "Info": return "bg-blue-500/20 text-blue-400 border-blue-500/50";
      default: return "bg-slate-500/20 text-slate-400 border-slate-500/50";
    }
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <p className="text-slate-400 mt-2">Loading vulnerabilities...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white flex items-center gap-2">
            <AlertTriangle className="h-6 w-6" />
            Vulnerability Management
          </h2>
          <p className="text-slate-400">Track and manage security vulnerabilities from Nessus scans</p>
        </div>
        <Badge variant="outline" className="border-slate-600 text-slate-300">
          {totalItems} vulnerabilities
        </Badge>
      </div>

      {/* Filters */}
      <Card className="bg-slate-800 border-slate-700">
        <CardContent className="pt-6">
          <div className="flex flex-wrap gap-4">
            <div className="flex-1 min-w-64">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-slate-400" />
                <Input
                  placeholder="Search vulnerabilities by name, plugin ID, or host..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>
            <Select value={selectedSeverity} onValueChange={setSelectedSeverity}>
              <SelectTrigger className="w-40 bg-slate-700 border-slate-600 text-white">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent className="bg-slate-700 border-slate-600">
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="Critical">Critical</SelectItem>
                <SelectItem value="High">High</SelectItem>
                <SelectItem value="Medium">Medium</SelectItem>
                <SelectItem value="Low">Low</SelectItem>
                <SelectItem value="Info">Info</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Pagination Controls */}
      {totalItems > 0 && (
        <PaginationControls
          currentPage={currentPage}
          totalPages={totalPages}
          totalItems={totalItems}
          startIndex={startIndex}
          endIndex={endIndex}
          itemsPerPage={itemsPerPage}
          onPageChange={goToPage}
          onNext={nextPage}
          onPrev={prevPage}
          hasNext={hasNext}
          hasPrev={hasPrev}
        />
      )}

      {/* Vulnerability List */}
      <div className="space-y-4">
        {currentVulnerabilities.map((vuln) => (
          <Card key={vuln.id} className="bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors">
            <CardContent className="p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="text-white font-semibold">{vuln.plugin_name}</h3>
                    <Badge className={getSeverityColor(vuln.severity)}>
                      {vuln.severity} ({vuln.cvss_score || 'N/A'})
                    </Badge>
                    <Badge variant="secondary" className="bg-orange-500/20 text-orange-400">
                      Open
                    </Badge>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-slate-400 mb-3">
                    <div className="flex items-center gap-1">
                      <span className="font-medium">Plugin ID:</span> {vuln.plugin_id}
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="font-medium">Host:</span> {vuln.host}
                    </div>
                    <div className="flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      <span className="font-medium">Discovered:</span> {new Date(vuln.created_at).toLocaleDateString()}
                    </div>
                  </div>

                  <div className="flex items-center gap-1 text-sm text-slate-400 mb-3">
                    <span className="font-medium">Port:</span> {vuln.port}/{vuln.protocol}
                  </div>

                  <p className="text-slate-300 text-sm">{vuln.synopsis || vuln.description}</p>
                </div>

                <div className="flex gap-2 ml-4">
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm" className="border-slate-600">
                        View Details
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="bg-slate-800 border-slate-700 max-w-2xl">
                      <DialogHeader>
                        <DialogTitle className="text-white">{vuln.plugin_name}</DialogTitle>
                      </DialogHeader>
                      <div className="space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label className="text-slate-300">Plugin ID</Label>
                            <p className="text-slate-400">{vuln.plugin_id}</p>
                          </div>
                          <div>
                            <Label className="text-slate-300">CVSS Score</Label>
                            <p className="text-slate-400">{vuln.cvss_score || 'N/A'}</p>
                          </div>
                          <div>
                            <Label className="text-slate-300">Host</Label>
                            <p className="text-slate-400">{vuln.host}</p>
                          </div>
                          <div>
                            <Label className="text-slate-300">Port/Protocol</Label>
                            <p className="text-slate-400">{vuln.port}/{vuln.protocol}</p>
                          </div>
                        </div>
                        
                        {vuln.synopsis && (
                          <div>
                            <Label className="text-slate-300">Synopsis</Label>
                            <p className="text-slate-400 mt-1">{vuln.synopsis}</p>
                          </div>
                        )}
                        
                        <div>
                          <Label className="text-slate-300">Description</Label>
                          <p className="text-slate-400 mt-1">{vuln.description}</p>
                        </div>
                        
                        {vuln.solution && (
                          <div>
                            <Label className="text-slate-300">Solution</Label>
                            <p className="text-slate-400 mt-1">{vuln.solution}</p>
                          </div>
                        )}
                        
                        {vuln.cve && vuln.cve.length > 0 && (
                          <div>
                            <Label className="text-slate-300">CVE References</Label>
                            <div className="mt-1 flex flex-wrap gap-2">
                              {vuln.cve.map((cveId, index) => (
                                <Badge key={index} variant="outline" className="border-slate-600 text-slate-300">
                                  {cveId}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Bottom Pagination */}
      {totalItems > itemsPerPage && (
        <PaginationControls
          currentPage={currentPage}
          totalPages={totalPages}
          totalItems={totalItems}
          startIndex={startIndex}
          endIndex={endIndex}
          itemsPerPage={itemsPerPage}
          onPageChange={goToPage}
          onNext={nextPage}
          onPrev={prevPage}
          hasNext={hasNext}
          hasPrev={hasPrev}
        />
      )}

      {filteredVulnerabilities.length === 0 && (
        <Card className="bg-slate-800 border-slate-700">
          <CardContent className="text-center py-12">
            <AlertTriangle className="h-12 w-12 text-slate-500 mx-auto mb-4" />
            <h3 className="text-slate-300 text-lg font-medium mb-2">No vulnerabilities found</h3>
            <p className="text-slate-400">Upload a Nessus file to see vulnerabilities or adjust your search criteria.</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
