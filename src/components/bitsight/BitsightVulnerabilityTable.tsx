
import { useState, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { ArrowUpDown, Filter, UserPlus, CheckCircle, AlertCircle, Clock, Tag } from "lucide-react";
import { usePagination } from "@/hooks/usePagination";
import { PaginationControls } from "@/components/PaginationControls";

interface Vulnerability {
  id: string;
  assetName: string;
  assetIp: string;
  title: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  firstDetected: string;
  assignedTo?: string;
  status: 'Open' | 'In Progress' | 'Closed';
  tags: string[];
  cve?: string;
}

interface BitsightVulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  searchQuery: string;
  loading: boolean;
}

export const BitsightVulnerabilityTable = ({ vulnerabilities, searchQuery, loading }: BitsightVulnerabilityTableProps) => {
  const [selectedVulns, setSelectedVulns] = useState<string[]>([]);
  const [sortBy, setSortBy] = useState<keyof Vulnerability>('firstDetected');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');

  // Mock team members - in real app this would come from API
  const teamMembers = [
    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Eve Brown'
  ];

  // Filter and sort vulnerabilities
  const filteredVulnerabilities = useMemo(() => {
    let filtered = vulnerabilities.filter(vuln => {
      const matchesSearch = searchQuery === '' || 
        vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vuln.assetName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vuln.assetIp.includes(searchQuery) ||
        vuln.cve?.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesSeverity = filterSeverity === 'all' || vuln.severity === filterSeverity;
      const matchesStatus = filterStatus === 'all' || vuln.status === filterStatus;
      
      return matchesSearch && matchesSeverity && matchesStatus;
    });

    // Sort
    filtered.sort((a, b) => {
      const aVal = a[sortBy];
      const bVal = b[sortBy];
      
      if (sortOrder === 'asc') {
        return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
      } else {
        return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;
      }
    });

    return filtered;
  }, [vulnerabilities, searchQuery, filterSeverity, filterStatus, sortBy, sortOrder]);

  const {
    currentData,
    currentPage,
    totalPages,
    totalItems,
    goToPage,
    nextPage,
    prevPage,
    hasNext,
    hasPrev
  } = usePagination({
    data: filteredVulnerabilities,
    itemsPerPage: 20
  });

  const getSeverityBadge = (severity: string) => {
    const colors = {
      Critical: 'bg-red-500/20 text-red-400 border-red-500/30',
      High: 'bg-orange-500/20 text-orange-400 border-orange-500/30',
      Medium: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',
      Low: 'bg-green-500/20 text-green-400 border-green-500/30'
    };
    return (
      <Badge className={`${colors[severity as keyof typeof colors]} border`}>
        {severity}
      </Badge>
    );
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Closed':
        return <CheckCircle className="h-4 w-4 text-green-400" />;
      case 'In Progress':
        return <Clock className="h-4 w-4 text-yellow-400" />;
      default:
        return <AlertCircle className="h-4 w-4 text-red-400" />;
    }
  };

  const handleSort = (column: keyof Vulnerability) => {
    if (sortBy === column) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(column);
      setSortOrder('desc');
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedVulns(currentData.map(v => v.id));
    } else {
      setSelectedVulns([]);
    }
  };

  const handleSelectVuln = (vulnId: string, checked: boolean) => {
    if (checked) {
      setSelectedVulns([...selectedVulns, vulnId]);
    } else {
      setSelectedVulns(selectedVulns.filter(id => id !== vulnId));
    }
  };

  if (loading) {
    return (
      <Card className="neo-premium">
        <CardHeader>
          <CardTitle className="text-white">Vulnerability Management</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            {Array.from({ length: 5 }).map((_, i) => (
              <div key={i} className="h-12 bg-gray-700 rounded"></div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="neo-premium">
      <CardHeader>
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <CardTitle className="text-white flex items-center gap-2">
            <Shield className="h-5 w-5 text-blue-400" />
            Vulnerability Management
            <Badge variant="outline" className="ml-2 text-gray-300">
              {totalItems} total
            </Badge>
          </CardTitle>
          
          <div className="flex flex-wrap items-center gap-2">
            <Select value={filterSeverity} onValueChange={setFilterSeverity}>
              <SelectTrigger className="w-32 bg-gray-900 border-gray-700 text-white">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="Critical">Critical</SelectItem>
                <SelectItem value="High">High</SelectItem>
                <SelectItem value="Medium">Medium</SelectItem>
                <SelectItem value="Low">Low</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-32 bg-gray-900 border-gray-700 text-white">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="Open">Open</SelectItem>
                <SelectItem value="In Progress">In Progress</SelectItem>
                <SelectItem value="Closed">Closed</SelectItem>
              </SelectContent>
            </Select>
            
            {selectedVulns.length > 0 && (
              <Button className="btn-premium">
                <UserPlus className="h-4 w-4 mr-2" />
                Bulk Assign ({selectedVulns.length})
              </Button>
            )}
          </div>
        </div>
      </CardHeader>
      
      <CardContent>
        {currentData.length === 0 ? (
          <div className="text-center py-8 text-gray-400">
            <Shield className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p>No vulnerabilities found matching your criteria.</p>
          </div>
        ) : (
          <>
            <div className="rounded-lg border border-gray-700 overflow-hidden">
              <Table>
                <TableHeader>
                  <TableRow className="border-gray-700 hover:bg-gray-800/50">
                    <TableHead className="w-12">
                      <Checkbox
                        checked={selectedVulns.length === currentData.length}
                        onCheckedChange={handleSelectAll}
                      />
                    </TableHead>
                    <TableHead 
                      className="text-gray-300 cursor-pointer hover:text-white"
                      onClick={() => handleSort('assetName')}
                    >
                      <div className="flex items-center gap-1">
                        Asset
                        <ArrowUpDown className="h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead 
                      className="text-gray-300 cursor-pointer hover:text-white"
                      onClick={() => handleSort('title')}
                    >
                      <div className="flex items-center gap-1">
                        Vulnerability
                        <ArrowUpDown className="h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead 
                      className="text-gray-300 cursor-pointer hover:text-white"
                      onClick={() => handleSort('severity')}
                    >
                      <div className="flex items-center gap-1">
                        Severity
                        <ArrowUpDown className="h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead 
                      className="text-gray-300 cursor-pointer hover:text-white"
                      onClick={() => handleSort('firstDetected')}
                    >
                      <div className="flex items-center gap-1">
                        First Detected
                        <ArrowUpDown className="h-4 w-4" />
                      </div>
                    </TableHead>
                    <TableHead className="text-gray-300">Assigned To</TableHead>
                    <TableHead className="text-gray-300">Status</TableHead>
                    <TableHead className="text-gray-300">Tags</TableHead>
                    <TableHead className="text-gray-300">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {currentData.map((vuln) => (
                    <TableRow 
                      key={vuln.id} 
                      className="border-gray-700 hover:bg-gray-800/30 transition-colors"
                    >
                      <TableCell>
                        <Checkbox
                          checked={selectedVulns.includes(vuln.id)}
                          onCheckedChange={(checked) => handleSelectVuln(vuln.id, checked as boolean)}
                        />
                      </TableCell>
                      <TableCell className="text-white">
                        <div>
                          <p className="font-medium">{vuln.assetName}</p>
                          <p className="text-sm text-gray-400">{vuln.assetIp}</p>
                        </div>
                      </TableCell>
                      <TableCell className="text-white">
                        <div className="max-w-xs">
                          <p className="font-medium truncate">{vuln.title}</p>
                          {vuln.cve && (
                            <p className="text-sm text-blue-400">{vuln.cve}</p>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        {getSeverityBadge(vuln.severity)}
                      </TableCell>
                      <TableCell className="text-gray-300">
                        {new Date(vuln.firstDetected).toLocaleDateString()}
                      </TableCell>
                      <TableCell>
                        {vuln.assignedTo ? (
                          <Badge variant="outline" className="text-gray-300">
                            {vuln.assignedTo}
                          </Badge>
                        ) : (
                          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                            <UserPlus className="h-4 w-4 mr-1" />
                            Assign
                          </Button>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          {getStatusIcon(vuln.status)}
                          <span className="text-gray-300">{vuln.status}</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex flex-wrap gap-1">
                          {vuln.tags.map((tag, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                          <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                            <Tag className="h-3 w-3" />
                          </Button>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-1">
                          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                            View
                          </Button>
                          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                            Edit
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
            
            <PaginationControls
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={goToPage}
              onNext={nextPage}
              onPrev={prevPage}
              hasNext={hasNext}
              hasPrev={hasPrev}
              totalItems={totalItems}
              itemsPerPage={20}
              startIndex={(currentPage - 1) * 20 + 1}
              endIndex={Math.min(currentPage * 20, totalItems)}
            />
          </>
        )}
      </CardContent>
    </Card>
  );
};
