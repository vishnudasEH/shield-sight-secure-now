
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Textarea } from "@/components/ui/textarea";
import { Scan, Play, Square, Upload } from "lucide-react";
import { ScanType } from "../types/scanTypes";
import { restrictSpaces } from "../utils/scanUtils";

interface ScanConfigurationProps {
  selectedScanType: string;
  setSelectedScanType: (value: string) => void;
  scanName: string;
  setScanName: (value: string) => void;
  targetInputs: string;
  setTargetInputs: (value: string) => void;
  isScanning: boolean;
  scanProgress: number;
  startScan: () => void;
  stopScan: () => void;
  handleFileUpload: (event: React.ChangeEvent<HTMLInputElement>) => void;
}

export const ScanConfiguration = ({
  selectedScanType,
  setSelectedScanType,
  scanName,
  setScanName,
  targetInputs,
  setTargetInputs,
  isScanning,
  scanProgress,
  startScan,
  stopScan,
  handleFileUpload
}: ScanConfigurationProps) => {
  const scanTypes: ScanType[] = [
    { 
      id: "quick", 
      name: "Quick Scan", 
      path: "/nuclei-templates/passive/cves",
      description: "Passive CVE detection scan" 
    },
    { 
      id: "cve", 
      name: "CVE Scan", 
      path: "/nuclei_templates/http/CVE/",
      description: "Comprehensive CVE vulnerability scan" 
    },
    { 
      id: "full", 
      name: "Full Scan", 
      path: "/nuclei_templates/",
      description: "Complete nuclei template scan" 
    },
    { 
      id: "subdomain", 
      name: "Subdomain Takeover", 
      path: "/nuclei-templates/http/takeovers/",
      description: "Subdomain takeover vulnerability scan" 
    },
  ];

  return (
    <Card className="bg-slate-800 border-slate-700">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <Scan className="h-5 w-5" />
          Nuclei Vulnerability Scanner
        </CardTitle>
        <CardDescription className="text-slate-400">
          Configure and execute nuclei scans against VM at 10.0.0.1
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Scan Type Selection */}
        <div>
          <Label className="text-slate-300 mb-3 block">Scan Type</Label>
          <Select value={selectedScanType} onValueChange={setSelectedScanType}>
            <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="bg-slate-700 border-slate-600">
              {scanTypes.map((type) => (
                <SelectItem key={type.id} value={type.id} className="text-white">
                  <div>
                    <div className="font-medium">{type.name}</div>
                    <div className="text-xs text-slate-400">{type.path}</div>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <p className="text-xs text-slate-400 mt-1">
            {scanTypes.find(type => type.id === selectedScanType)?.description}
          </p>
        </div>

        {/* Scan Options */}
        <div className="space-y-4">
          <div>
            <Label htmlFor="scanName" className="text-slate-300">Scan Name</Label>
            <Input
              id="scanName"
              placeholder="Enter scan name (no spaces)"
              value={scanName}
              onChange={(e) => setScanName(restrictSpaces(e.target.value))}
              className="bg-slate-700 border-slate-600 text-white mt-1"
            />
          </div>

          <div>
            <Label htmlFor="targets" className="text-slate-300">Target IPs or URLs</Label>
            <Textarea
              id="targets"
              placeholder="Enter targets (one per line)&#10;example.com&#10;192.168.1.100&#10;subdomain.example.com"
              value={targetInputs}
              onChange={(e) => setTargetInputs(e.target.value)}
              className="bg-slate-700 border-slate-600 text-white mt-1 min-h-[100px]"
            />
            <div className="flex items-center gap-2 mt-2">
              <Label htmlFor="targetFile" className="text-slate-400 text-sm cursor-pointer flex items-center gap-1">
                <Upload className="h-3 w-3" />
                Upload .txt file
              </Label>
              <Input
                id="targetFile"
                type="file"
                accept=".txt"
                onChange={handleFileUpload}
                className="hidden"
              />
            </div>
          </div>
        </div>

        {/* Scan Controls */}
        <div className="pt-4 border-t border-slate-700">
          {isScanning ? (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-slate-300">Nuclei scan in progress...</span>
                <Badge variant="secondary" className="bg-blue-500/20 text-blue-400">
                  {scanProgress.toFixed(0)}% Complete
                </Badge>
              </div>
              <Progress value={scanProgress} className="h-2" />
              <div className="flex gap-2">
                <Button variant="outline" onClick={stopScan} className="border-slate-600">
                  <Square className="h-4 w-4 mr-2" />
                  Stop Scan
                </Button>
              </div>
            </div>
          ) : (
            <div className="flex gap-2">
              <Button onClick={startScan} className="bg-blue-600 hover:bg-blue-700">
                <Play className="h-4 w-4 mr-2" />
                Execute Scan
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
